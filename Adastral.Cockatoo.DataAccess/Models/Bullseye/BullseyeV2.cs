using System.Text.Json.Serialization;

namespace Adastral.Cockatoo.DataAccess.Models;

public class BullseyeV2
{
    [JsonPropertyName("bl_ver")]
    public uint SchemaVersion { get; set; } = 2;
    [JsonPropertyName("version")]
    public string? LatestVersion { get; set; } = null;
    /// <summary>
    /// Short name for the game that this is for. Like <see cref="AppVarModDetail.SourceModName"/>
    /// </summary>
    [JsonPropertyName("game")]
    public string Name { get; set; } = "";
    /// <summary>
    /// Unix Timestamp since this file was last updated (UTC, Seconds), but stored as a String.
    /// </summary>
    [JsonPropertyName("last_updated")]
    public string LastUpdated { get; set; } = "0";
    /// <summary>
    /// Get and parse the value for <see cref="LastUpdated"/>
    /// </summary>
    public long GetLastUpdated() => long.Parse(LastUpdated);
    /// <summary>
    /// Set the value for <see cref="LastUpdated"/> to the current Unix Timestamp (UTC, Seconds)
    /// </summary>
    public void SetLastUpdated()
        => SetLastUpdated(DateTimeOffset.UtcNow.ToUnixTimeSeconds());
    /// <summary>
    /// Set the value for <see cref="LastUpdated"/> with the <paramref name="value"/> provided.
    /// </summary>
    public void SetLastUpdated(long value)
    {
        LastUpdated = value.ToString();
    }

    /// <summary>
    /// Dictionary of all the available versions. Key is the version ID, and the value should be an instance of <see cref="BullseyeV2VersionInfo"/>.
    /// </summary>
    [JsonPropertyName("versions")]
    public Dictionary<string, BullseyeV2VersionInfo> Versions { get; set; } = new();
    /// <summary>
    /// 2D Dictionary, where the 1st key is the version key from <see cref="Versions"/> that is being updated to, and the 2nd key is what version it can update from.
    /// </summary>
    [JsonPropertyName("patches")]
    public Dictionary<string, Dictionary<string, BullseyeV2PatchInfo>> Patches { get; set; } = new();
}
public class BullseyeV2VersionInfo
{
    /// <summary>
    /// When provided, this will indicate what the key of the previous version is in <see cref="BullseyeV2.Versions"/>
    /// </summary>
    [JsonPropertyName("prev")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PreviousVersionKey { get; set; } = null;
    /// <summary>
    /// Tag for this version. Purely cosmetic, but tags are unique for an application/mod.
    /// </summary>
    [JsonPropertyName("tag")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Tag { get; set; } = null;
    /// <summary>
    /// Filename for <c>.torrent</c> file that contains the archive.
    /// </summary>
    [JsonPropertyName("file_p2p")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TorrentFilename { get; set; }
    /// <summary>
    /// Download size for <see cref="file"/>
    /// </summary>
    [JsonPropertyName("file_size")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public long? FileSize { get; set; }
    /// <summary>
    /// Total size of version when extracted to disk.
    /// </summary>
    [JsonPropertyName("ext_size")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public long? ExtractedSize { get; set; }
    /// <summary>
    /// Signature of the contents of <see cref="Filename"/>
    /// TODO better description, ask intcoms
    /// </summary>
    [JsonPropertyName("sig")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SignatureFilename { get; set; }
    /// <summary>
    /// Filename for the archive that contains this version.
    /// </summary>
    [JsonPropertyName("file")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Filename { get; set; }
}
public class BullseyeV2PatchInfo
{
    /// <summary>
    /// Filename for the torrent which contains the patch. (e.g; <c>of-19to20.torrent</c>)
    /// </summary>
    [JsonPropertyName("file_p2p")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TorrentFilename { get; set; } = null;
    /// <summary>
    /// Filename for the patch generated by Butler. (e.g; <c>of-19to20.pwr</c>)
    /// </summary>
    [JsonPropertyName("file")]
    public string Filename { get; set; } = "";
    /// <summary>
    /// Estimated amount of Temporary Space that is required to apply this patch.
    /// </summary>
    [JsonPropertyName("tempreq")]
    public long TemporarySpaceRequired { get; set; } = 0;
    /// <summary>
    /// Download size for <see cref="file"/>
    /// </summary>
    [JsonPropertyName("dsize")]
    public long FileSize { get; set; } = 0;
}