using System.Text.Json.Serialization;

namespace Adastral.Cockatoo.DataAccess.Models;

public class BullseyeV1
{
    /// <summary>
    /// Dictionary of all the available versions. Key is the version ID, and the value should be an instance of <see cref="BullseyeV1VersionInfo"/>.
    /// </summary>
    [JsonPropertyName("versions")]
    public Dictionary<string, BullseyeV1VersionInfo> Versions { get; set; } = new();
    /// <summary>
    /// Patches to bring the specified version (key) to the latest version. Key should exist in <see cref="Versions"/> so it can be verified before updating.
    /// </summary>
    [JsonPropertyName("patches")]
    public Dictionary<string, BullseyeV1PatchInfo> Patches { get; set; } = new();
}

public class BullseyeV1VersionInfo
{
    /// <summary>
    /// Url or Filename for the torrent.
    /// </summary>
    [JsonPropertyName("url")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TorrentUrl { get; set; }
    /// <summary>
    /// TODO unknown property description
    /// </summary>
    [JsonPropertyName("presz")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public long? PreviousInstallSize { get; set; }
    /// <summary>
    /// TODO unknown property description
    /// </summary>
    [JsonPropertyName("postsz")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public long? AfterInstallSize { get; set; }
    /// <summary>
    /// Url or Filename to the file that is the signature generated by Butler.
    /// </summary>
    [JsonPropertyName("signature")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SignatureUrl { get; set; }
    /// <summary>
    /// Filename that is the compressed archive of the target game/app.
    /// </summary>
    [JsonPropertyName("file")]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Filename { get; set; }
}

public class BullseyeV1PatchInfo
{
    /// <summary>
    /// Url or Filename for the torrent.
    /// </summary>
    [JsonPropertyName("url")]
    public string? TorrentUrl { get; set; }
    /// <summary>
    /// Filename for the Patch that was generated by Butler.
    /// </summary>
    [JsonPropertyName("file")]
    public string Filename { get; set; } = "";
    /// <summary>
    /// Estimated amount of temporary file space required.
    /// </summary>
    [JsonPropertyName("tempreq")]
    public long TemporarySpaceRequired { get; set; }
}